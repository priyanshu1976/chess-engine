import { PieceType } from './types'
export const PST = {
  p: [
    [0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 1, 1, 0, 0, 0],
    [0, 1, 2, 2, 2, 2, 1, 0],
    [1, 2, 3, 3, 3, 3, 2, 1],
    [1, 2, 3, 4, 4, 3, 2, 1],
    [2, 3, 4, 5, 5, 4, 3, 2],
    [3, 4, 5, 6, 6, 5, 4, 3],
    [7, 7, 7, 7, 7, 7, 7, 7],
  ],
  n: [
    [0, 1, 2, 2, 2, 2, 1, 0],
    [1, 3, 4, 4, 4, 4, 3, 1],
    [2, 4, 6, 6, 6, 6, 4, 2],
    [2, 4, 6, 7, 7, 6, 4, 2],
    [2, 4, 6, 7, 7, 6, 4, 2],
    [2, 4, 6, 6, 6, 6, 4, 2],
    [1, 3, 4, 4, 4, 4, 3, 1],
    [0, 1, 2, 2, 2, 2, 1, 0],
  ],
  b: [
    [0, 1, 1, 2, 2, 1, 1, 0],
    [1, 2, 3, 3, 3, 3, 2, 1],
    [1, 3, 4, 4, 4, 4, 3, 1],
    [2, 3, 4, 5, 5, 4, 3, 2],
    [2, 3, 4, 5, 5, 4, 3, 2],
    [1, 3, 4, 4, 4, 4, 3, 1],
    [1, 2, 3, 3, 3, 3, 2, 1],
    [0, 1, 1, 2, 2, 1, 1, 0],
  ],
  r: [
    [0, 0, 1, 2, 2, 1, 0, 0],
    [0, 1, 2, 3, 3, 2, 1, 0],
    [0, 1, 2, 3, 3, 2, 1, 0],
    [0, 1, 2, 3, 3, 2, 1, 0],
    [0, 1, 2, 3, 3, 2, 1, 0],
    [0, 1, 2, 3, 3, 2, 1, 0],
    [0, 1, 2, 3, 3, 2, 1, 0],
    [0, 0, 1, 2, 2, 1, 0, 0],
  ],
  q: [
    [0, 0, 1, 1, 1, 1, 0, 0],
    [0, 1, 2, 2, 2, 2, 1, 0],
    [1, 2, 3, 3, 3, 3, 2, 1],
    [1, 2, 3, 4, 4, 3, 2, 1],
    [1, 2, 3, 4, 4, 3, 2, 1],
    [1, 2, 3, 3, 3, 3, 2, 1],
    [0, 1, 2, 2, 2, 2, 1, 0],
    [0, 0, 1, 1, 1, 1, 0, 0],
  ],
  k: [
    [2, 2, 1, 0, 0, 1, 2, 2],
    [2, 2, 1, 0, 0, 1, 2, 2],
    [1, 1, 0, 0, 0, 0, 1, 1],
    [0, 0, 0, -1, -1, 0, 0, 0],
    [0, 0, 0, -1, -1, 0, 0, 0],
    [1, 1, 0, 0, 0, 0, 1, 1],
    [2, 2, 1, 0, 0, 1, 2, 2],
    [2, 2, 1, 0, 0, 1, 2, 2],
  ],
} as const

export const PIECE_VAL: Record<PieceType, number> = {
  p: 1,
  n: 3.8,
  b: 2.5,
  r: 6,
  q: 20,
  k: 50000,
}

export const kingPos = (color: 'w' | 'b', board: any) => {
  for (let r = 0; r < 8; r++)
    for (let f = 0; f < 8; f++) {
      const s = board[r][f]
      if (s && s.type === 'k' && s.color === color)
        return [r, f] as [number, number]
    }
  return null
}

export const pawnShieldPenalty = (
  color: 'w' | 'b',
  k: [number, number] | null,
  board: any
) => {
  if (!k) return 0
  const [r, f] = k
  const dir = color === 'w' ? 1 : -1
  let shield = 0
  for (const df of [-1, 0, 1]) {
    const rr = r + dir,
      ff = f + df
    if (rr >= 0 && rr < 8 && ff >= 0 && ff < 8) {
      const s = board[rr][ff]
      if (s && s.type === 'p' && s.color === color) shield++
    }
  }
  return (3 - shield) * 0.15
}
